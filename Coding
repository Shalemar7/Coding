import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class MultiProcessSingleThread {

    public static class Worker implements Runnable {
        private int processId;

        public Worker(int processId) {
            this.processId = processId;
        }

        @Override
        public void run() {
            System.out.println("Process " + processId + ": Starting...");
            try {
                // Simulate some work
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Process " + processId + ": Finishing.");
        }
    }

    public static void main(String[] args) {
        int numProcesses = 2;

        ExecutorService executor = Executors.newFixedThreadPool(numProcesses);
        for (int processId = 0; processId < numProcesses; processId++) {
            executor.execute(new Worker(processId));
        }
        executor.shutdown();

        try {
            executor.awaitTermination(1, TimeUnit.MINUTES);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("All processes and threads completed.");
    }
}
